
package My.Shapes {
    DEBUG = true

    package Inner {
        class Ping {
            method pong() {
                print(self, "pong", DEBUG, ANSWER)
            }
        }
        function deep(mesg) {
            print("this is deep: ", DEBUG, mesg, ANSWER)
        }
    }

    class Point {
        has x = 0
        has y = 0

        method move(x, y) {
            self.x = x
            self.y = y
        }
    }
}

package My.Shapes {

    ANSWER = 42

    class Point3D from Point {
        has z = 0

        method move(x, y, z) {
            super::move(self, x, y)
            if DEBUG {
                print("moving ${self} to ${x}, ${y}, ${z}")
            }
            self.z = z
        }
    }

    function greet(whom) {
        print("Hello ${whom}!")
    }
}

import Point, Point3D from My.Shapes
import Ping from My.Shapes.Inner

Point3D.new()
My.Shapes.Point.new()
My.Shapes.Inner::deep()

var ping = My.Shapes.Inner.Ping.new()
ping.pong()

var ping = Ping.new()
ping.pong()

var p = Point3D.new()
p.move(1,2,3)

var q = Point.new()
print(q)

10.times ->{ print(_) }

