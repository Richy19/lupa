
package My::Shapes {
    DEBUG = true

    package Inner {
        function deep(mesg) {
            print("this is deep: ", DEBUG, mesg, ANSWER)
        }
    }

    class Point {
        has x = 0
        has y = 0

        method move(x, y) {
            self.x = x
            self.y = y
        }
    }
}

package My::Shapes {

    ANSWER = 42

    class Point3D from Point {
        has z = 0

        method move(x, y, z) {
            super.move(x, y)
            if DEBUG {
                print("moving ${self} to ${x}, ${y}, ${z}")
            }
            self.z = z
        }
    }

    function greet(whom) {
        print("Hello ${whom}!")
    }
}

import Point3D from My::Shapes
import Point3D from My::Shapes in Foo
import Point from My::Shapes

Foo::Point3D()
My::Shapes::Point()
My::Shapes::Inner::deep()

var p = Point3D()
p.move(1,2,3)

var q = Point()


