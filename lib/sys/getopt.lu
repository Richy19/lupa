export get_opts, get_ordered_opts

function convert_short2long(opts) {
   var i = 1
   var len = #opts
   var ret = { }

   for short_opt, accept_arg in opts.gmatch("(%w)(:?)") {
      ret::[short_opt] = #accept_arg
   }
   return ret
}

function exit_with_error(msg, exit_status) {
   io::stderr.write(msg)
   os::exit(exit_status)
}

function err_unknown_opt(opt) {
   exit_with_error(
      "Unknown option `-${(#opt > 1 && '-' || '')}${opt}'\n", 1
   )
}

function canonize(options, opt) {
   if !options::[opt] {
      err_unknown_opt(opt)
   }

   while type(options::[opt]) == 'string' {
      opt = options::[opt]
      if !options::[opt] {
	 err_unknown_opt(opt)
      }
   }

   return opt
}

function get_ordered_opts(arg, sh_opts, long_opts) {
   var i      = 1
   var count  = 1
   var opts   = { }
   var optarg = { }

   var options = convert_short2long(sh_opts)
   for k,v in pairs(long_opts) {
      options::[k] = v
   }

   while i <= #arg {
      var a = arg::[i]

      if a == "--" {
	 i += 1
	 break
      }
      else if a == "-" {
	 break
      }
      else if a.sub(1, 2) == "--" {
	 var pos = a.find("=", 1, true)

	 if pos {
	    var opt = a.sub(3, pos-1)

	    opt = canonize(options, opt)

	    if options::[opt] == 0 {
	       exit_with_error("Bad usage of option `${a}'\n", 1)
	    }

	    optarg::[count] = a.sub(pos+1)
	    opts::[count] = opt
         }
	 else {
	    var opt = a.sub(3)
	    opt = canonize(options, opt)

	    if options::[opt] == 0 {
	       opts::[count] = opt
            }
	    else {
	       if i == #arg {
		  exit_with_error("Missed value for option `${a}'\n", 1)
	       }
	       optarg::[count] = arg::[i+1]
	       opts::[count] = opt
	       i += 1
	    }
	 }
	 count += 1
      }
      else if a.sub(1, 1) == "-" {
	 var j
	 for j=2, a.len {
	    var opt = canonize(options, a.sub(j, j))

	    if options::[opt] == 0 {
	       opts::[count] = opt
	       count += 1
            }
	    else if a.len {
	       if i == #arg {
		  exit_with_error("Missed value for option `-${opt}'\n", 1)
	       }

	       optarg::[count] = arg::[i+1]
	       opts::[count] = opt
	       i += 1
	       count += 1
	       break
            }
	    else {
	       optarg::[count] = a.sub(j+1)
	       opts::[count] = opt
	       count += 1
	       break
	    }
	 }
      }
      else {
	 break
      }

      i += 1
   }

   return opts, i, optarg
}

function get_opts(arg, sh_opts, long_opts) {
   var ret = { }

   var opts, optind, optarg = get_ordered_opts(arg, sh_opts, long_opts)
   for i,v in ipairs(opts) {
      if optarg::[i] {
	 ret::[v] = optarg::[i]
      }
      else {
	 ret::[v] = 1
      }
   }

   return ret,optind
}

