export Template

import Grammar, Context, Compiler from lupa.lang in lupa

object Grammar from typeof lupa.Grammar {
   rule markup {
      <{super.preamble}>
      {~ (<const> (<code> <const>)*) ~}
      (!. | (ofs, src) => {
         throw Error.new("invalid syntax")
      }
   }
   rule code {
      <intrp> | <logic>
   }
   rule intrp {
      "<%=" %s* {~ <func_body> ~} -> function(s) {
         return "__out:push(%s);".format(s)
      } ~} %s* "%>"
   }
   rule logic {
      "<%" {~ %s*  <func_body> %s* ~} "%>" %s* -> '%1'
   }
   rule const {
      {~ { (!<code> .)* } -> function(s) {
         if s != "" {
            return "__out:push(%q);".format(s)
         }
      } ~}
   }
}

object Compiler from typeof lupa.Compiler {

    var CACHE = { }

    method compile(source, environ) {
        if CACHE[source] {
            return CACHE[source]
        }
        var code = Grammar.markup.match(source)
        self.predef(environ)
        var luac = super.compile(source
        CACHE[source] = luac
        return luac
    }

    method clear_cache() {
        CACHE = { }
    }
}

import open from io

class Template {
    has base = "."

    method init(base) {
        self.base = base
    }
    method process_file(path, vars) {
        var path = self.base + '/' + path
        var file = assert(open(path, "r"))
        var data = file.read("*a")
        file.close()
        return self.process(data, vars, path)
    }
    method process(src, vars, name) {
        var code = Compiler.compile(src)
        var out = [ ] 
        var env = { }
        if vars {
           for k,v in vars { env[k] = v }
        }

        code(out, env)
        return out.concat()
    }
}

/*
var s = """
<html>
<body>
  <ul>
<% var a = ['a','b','c','d','e'] %>
<% for i, v in a { %>
    <li> <%= i %> => <%= v %> </li>
<% } %>
  </ul>
</body>
</html>
"""
var t = Template()
print(t.process(s))
for i=1, 100000 {
    t.process(s)
}
*/


