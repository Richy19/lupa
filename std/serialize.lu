import FFI from std.system

FFI cdef """
   typedef struct serialize_Buffer {
     size_t size;
     size_t offs;
     size_t seek;
     uint8_t *data;
   } serialize_Buffer;
"""

class Buffer with FFI::MetaType['serialize_Buffer'] {
   method init(size = 32, data = "") {
      self::data = FFI::C::malloc(size)
      self::offs = 0
      self::seek = 0
      self.put_bytes(data)
   }
   method need(size) {
      if self::size < self::offs + size {
         var new_size = self::offs + size
         while new_size < self::size {
            new_size = new_size * 2
         }
         self::data = FFI::C::realloc(FFI.cast('void*', self::data), new_size)
         self::size = new_size
      }
   }

   method put(v) {
      self.need(1)
      var offs = self::offs
      self::data::[offs] = v
      self::offs = offs + 1
   }
   method get {
      var v = self::data::[self::seek]
      self::seek += 1
      return v
   }

   self::__proto::put_uint8 = self::__proto::put
   self::__proto::get_uint8 = self::__proto::get

   method put_uint16(v) {
      self.need(2)
      var offs = self::offs
      var dptr = self::data + offs
      dptr::[0] = v
      dptr::[1] = v >> 8
      self::offs = offs + 2
   }
   method get_uint16 {
      var s = self::seek
      var d = self::data + s
      self::seek += 2
      var v = d::[0] + (d::[1] << 8)
      return v
   }

   method put_uint32(v) {
      self.need(4)
      var offs = self::offs
      var dptr = self::data + offs
      dptr::[0] = v
      dptr::[1] = v >> 8
      dptr::[2] = v >> 16
      dptr::[3] = v >> 24

      self::offs = offs + 4
   }

   method get_uint32 {
      var s = self::seek
      self::seek += 4
      var d = self::data + s
      var v = d::[0] + (d::[1] << 8) + (d::[2] << 16) + (d::[3] << 24)
      return v
   }
   method put_uleb128(v : Number) {
      var i, offs = 0, self::offs
      do {
         var b = v & 0x7f
         v >>= 7
         if v != 0 {
            b |= 0x80
         }
         self.put(b)
         i = i + 1
      } while v != 0
   }

   var double_p = FFI.typeof('double[1]')
   method put_double(v) {
      self.need(8)
      var offs = self::offs
      var numv = double_p(v)
      var char = FFI.cast('uint8_t*', numv)
      FFI.copy(self::data + offs, char, 8)
      self::offs = offs + 8
   }
   method get_double : Number {
      var s = self::seek
      self::seek += 8
      var d = FFI.cast('double*', self::data + s)
      var v = d::[0]
      return v
   }

   method put_bytes(v) {
      var offs = self::offs
      if v == '' { return offs }
      self.need(#v)
      FFI.copy(self::data + offs, v)
      self::offs = offs + #v
   }

   method get_bytes(l) {
      var s = self::seek
      self::seek = s + l
      var d = self::data + s
      return FFI.string(d, l)
   }

   method __tostring {
      FFI.string(self::data, self::offs)
   }

   method release {
      FFI::C::free(self::data)
   }
   method clear {
      FFI.fill(self::data, self::size, 0) 
      self::offs = 0
      self::seek = 0
   }
}

object Serializer {
   var NIL = 0
   var BIT = 1
   var NUM = 2
   var STR = 3
   var TAB = 4
   var FUN = 5
   var USD = 6
   var CDT = 7
   var REF = 8
   var THR = 9

   var BUF = Buffer.new(128)

   var type  = type
   var pairs = pairs

   function encode_table(val, reg, buf) {
      buf.put_uint8(TAB)
      for k,v in pairs(val) {
         encode_value(k, reg, buf)
         encode_value(v, reg, buf)
      }
      encode_value(nil, reg, buf)
   }

   function encode_value(val, reg, buf, env) {
      var t = type(val)
      if t == 'string' {
         buf.put_uint8(STR)
         buf.put_uint16(#val)
         buf.put_bytes(val)
      }
      else if t == 'number' {
         buf.put_uint8(NUM)
         buf.put_double(val)
      }
      else if t == 'boolean' {
         buf.put_uint8(BIT)
         buf.put_uint8(val == true && 1 || 0)
      }
      else if t == 'nil' {
         buf.put_uint8(NIL)
      }
      else if t == 'function' {
         if reg::[val] {
            var ref = reg::[val]
            buf.put_uint8(REF)
            buf.put_uint32(ref)
         }
         else {
            reg::[#reg + 1] = true
            reg::[val] = #reg
            buf.put_uint8(FUN)
            var s = string::dump(val)
            buf.put_uint16(#s)
            buf.put_bytes(s)
         }
      }
      else if t == 'table' {
         if reg::[val] {
            var ref = reg::[val]
            buf.put_uint8(REF)
            buf.put_uint32(ref)
         }
         else {
            var key = ''
            if val::__type {
               key = typeof(val)::__name
            }
            reg::[#reg + 1] = true
            reg::[val] = #reg
            encode_table(val, reg, buf)
            buf.put_uint16(#key)
            buf.put_bytes(key)
         }
      }
      else if t == 'thread' {

      }
      else if t == 'cdata' {

      }
      else if t == 'userdata' {

      }
   }

   var debug = require('debug')
   function decode_value(reg, buf, env) {
      var t = buf.get_uint8()
      if t == STR {
         var l = buf.get_uint16()
         return buf.get_bytes(l)
      }
      else if t == NUM {
         return buf.get_double()
      }
      else if t == BIT {
         var v = buf.get_uint8()
         return v == 1
      }
      else if t == NIL {
         return nil
      }
      else if t == TAB {
         var o = newtable()
         reg::[#reg + 1] = o
         reg::[o] = #reg
         while true {
            var k = decode_value(reg, buf, env)
            if k == nil { break }
            var v = decode_value(reg, buf, env)
            o::[k] = v
         }
         var l = buf.get_uint16()
         var n = buf.get_bytes(l)
         if l > 0 {
            var c = env::[n]
            setmetatable(o, c::__proto)
         }
         return o
      }
      else if t == REF {
         var ref = buf.get_uint32()
         return reg::[ref]
      }
      else if t == FUN {
         var l = buf.get_uint16()
         var s = buf.get_bytes(l)
         var f = assert(loadstring(s))
         setfenv(f, env)
         return f
      }
      else if t == THR {

      }
      else if t == USD {

      }
      else if t == CDT {

      }
   }

   method encode(obj) {
      var buf = BUF
      var reg = { }
      buf.clear
      encode_value(obj, reg, buf)
      var str = tostring(buf)
      return str
   }
   method decode(str) {
      var buf = BUF
      buf.clear
      buf.put_bytes(str)
      var reg = { }
      var env = getenv(2)
      var val = decode_value(reg, buf, env)
      return val
   }
}

class Point {
   has x = 0
   has y = 0
   method move(x, y) {
      self.x = x
      self.y = y
   }
}

var a = [ ]
for i=1, 10 {
   var p = Point.new
   p.move(i+1,i+2)
   a.push(p)
}
var s, q
for i=1, 100_000 {
   s = Serializer.encode(a)
   q = Serializer.decode(s)
}
print(q)
