export File

import ffi, handle, request from system

class File {
   has fd
   has ofs = 0

   our O_RDONLY   = 0x0000
   our O_WRONLY   = 0x0001
   our O_RDWR     = 0x0002
   our O_ACCMODE  = 0x0003
   our O_NONBLOCK = 0x0004
   our O_APPEND   = 0x0008
   our O_CREAT    = 0x0200
   our O_TRUNC    = 0x0400
   our O_EXCL     = 0x0800

   var FLAGS = {
      ["r"]  = O_RDONLY,
      ["r+"] = O_RDWR,
      ["w"]  = O_CREAT  | O_TRUNC | O_WRONLY,
      ["w+"] = O_CREAT  | O_TRUNC | O_RDWR,
      ["a"]  = O_APPEND | O_CREAT | O_WRONLY,
      ["a+"] = O_APPEND | O_CREAT | O_RDWR,
   }

   static method open(path, how, mode) {
      var req  = mk_req('uv_fs_t')
      var file = self.new()
      file.fd = sys#uv_fs_open(LOOP, req, path, FLAGS[how], mode, nil)
      NREF += 1
      return file
   }

   var ROUSE = { }
   var FS_CB = ffi#cast('uv_fs_cb', function(req) {
      var key = tostring(req)
      if ROUSE[key] {
         ROUSE[key](req)
         ROUSE[key] = nil
      }
   })
   method write(str : String, ofs : Number = 0) {
      var req = mk_req('uv_fs_t')
      var buf = ffi#cast('void *', str)
      var curr = Fiber.self
      var key  = tostring(req)
      ROUSE[key] = function(req) {
         sys#uv_fs_req_cleanup(req)
         curr.ready
      }
      sys#uv_fs_write(LOOP, req, .fd, buf, str.len, ofs, FS_CB)
      curr.suspend
   }
   method close() {
      var req = mk_req('uv_fs_t')
      var curr = Fiber.self
      var key  = tostring(req)
      ROUSE[key] = function(req) {
         sys#uv_fs_req_cleanup(req)
         NREF -= 1
         curr.ready
      }
      sys#uv_fs_close(LOOP, req, .fd, FS_CB)
      curr.suspend
   }
}

