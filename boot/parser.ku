grammar Kula { 
    var s = / %space* /
    var prec = {
        ["^^"]  = 4,
        ["*"]   = 5,
        ["/"]   = 5,
        ["%"]   = 5,
        ["+"]   = 6,
        ["-"]   = 6,
        ["~"]   = 6,
        [">>"]  = 7,
        ["<<"]  = 7,
        [">>>"] = 7,
        ["<="]  = 8,
        [">="]  = 8,
        ["<"]   = 8,
        [">"]   = 8,
        ["=="]  = 9,
        ["!="]  = 9,
        ["&"]   = 10,
        ["^"]   = 11,
        ["|"]   = 12,
        ["&&"]  = 13,
        ["||"]  = 14,
    }
    var unrops = {
        ["!"] = "not(%s)",
        ["#"] = "#(%s)",
        ["-"] = "-(%s)",
        ["~"] = "Op.bnot(%s)",
    }
    var binops = {
        ["^^"] = "(%s)^(%s)",
        ["*"] = "(%s)*(%s)",
        ["/"] = "(%s)/(%s)",
        ["%"] = "(%s)%%(%s)",
        ["+"] = "(%s)+(%s)",
        ["-"] = "(%s)-(%s)",
        ["~"] = "(%s)..(%s)",
        [">>"] = "Op.rshift(%s,%s)",
        ["<<"] = "Op.lshift(%s,%s)",
        [">>>"] = "Op.arshift(%s,%s)",
        ["<="] = "(%s)<=(%s)",
        [">="] = "(%s)>=(%s)",
        ["<"] = "(%s)>(%s)",
        [">"] = "(%s)>(%s)",
        ["=="] = "(%s)==(%s)",
        ["!="] = "(%s)~=(%s)",
        ["&"] = "Op.band(%s,%s)",
        ["^"] = "Op.bxor(%s,%s)",
        ["|"] = "Op.bor(%s,%s)",
        ["&&"] = "(%s)and(%s)",
        ["||"] = "(%s)or(%s)",
    }
    function fold_prefix(o,e) {
        return unrops[o].format(e)
    }
    function fold_infix(e) {
        var s = [ e[1] ]
        for i=2, #e {
            s[#s + 1] = e[i]
            while !binops[s[#s]] && s[#s - 1] {
                var p = s[#s - 1]
                var n = e[i + 1]
                if n == nil || prec[p] <= prec[n] {
                    var b, o, a = s.pop(), s.pop(), s.pop()
                    s.push(binops[o].format(a, b))
                }
                else {
                    break
                }
            }
        }
        return s[1]
    }
    rule __init {
        {@ <expr> @} -> function(buf) { buf.concat() }
    }
    rule number {
        %digit+
    }
    rule primary {
        { <number> } | "(" <expr> ")"
    }
    rule expr {
        <infix_expr>
    }
    rule prefix_expr {
        {: { "!" | "#" | "-" | "~" } s <primary> :} -> fold_prefix
        | <primary>
    }
    rule infix_expr {
        {@ <prefix_expr> {: s {
            "+" | "-" | "~" | "^^" | "*" | "/" | "%" | "^" | ">>>" | ">>" | "<<"
            | "||" | "&&" | "|" | "&" | "==" | "!=" | ">="| "<=" | "<" | ">"
            | "in" !%W | "like" !%W
        } s <prefix_expr> :}* @} -> fold_infix
    }
}
var e = "1 + 2 / (3 + 4) << 5 - 6"
var e = "1 * -(2 - 3) && !1 || 2 >> 4 / 5"
print(e)
print("=>", Kula.match(e))
