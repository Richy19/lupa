import Compiler from lupa.compiler

var getopt = function(...args) {
   var opt = { }
   var idx = 0
   var len = args.len
   while idx < len {
      idx = idx + 1
      var arg = args[idx]
      if arg.sub(1,1) == '-' {
         var o = arg.sub(2)
         if o == 'o' {
            idx = idx + 1
            opt['o'] = args[idx]
         }
         else if o == 'l' {
            opt['l'] = true
         }
         else if o == 'b' {
            idx = idx + 1
            opt['b'] = args[idx]
         }
         else {
            error('unknown option: '+arg, 2)
         }
      }
      else {
         opt['file'] = arg
      }
   }
   return opt
}

var run = function(...a) {
   if a.len == 0 {
      var repl = require("lupa.repl")
      repl.run()
      os::exit(0)
   }
   var opt = getopt(...a)
   var sfh = assert(io::open(opt['file']))
   var src = sfh.read('*a')
   sfh.close()

   var lua
   try {
      lua = Compiler.compile(src)
   }
   catch (e) {
      print(tostring(e))
      os::exit(-1)
   }
   if opt['l'] {
      io::stdout.write(lua, "\n")
      os::exit(0)
   }

   if opt['o'] {
      var outc = io::open(opt['o'], "w+")
      outc.write(lua)
      outc.close()
   }
   else {
      lua = lua.gsub("^%s*#![^\n]*",'')
      var main = assert(loadstring(lua,'='+opt['file']))
      if opt['b'] {
         var outc = io::open(opt['b'], "wb+")
         outc.write(string::dump(main))
         outc.close()
      }
      else {
         var main_env  = require('lupa.predef')::environ()
         xpcall(main, function(err) {
            io::stderr.write(debug::traceback(tostring(err)),"\n")
            os::exit(1)
         }, main_env, opt['file'], ...a)
      }
   }
}

if global::arg::[1] { run(global::unpack(arg)) }

